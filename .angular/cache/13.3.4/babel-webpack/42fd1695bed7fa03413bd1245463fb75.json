{"ast":null,"code":"import { AngularFireDatabase } from 'angularfire2/database';\nimport { AngularFireAuth } from 'angularfire2/auth';\nimport * as firebase from 'firebase/app';\nimport { of } from 'rxjs';\nimport { take, switchMap, map } from 'rxjs/operators';\nimport { MessageService } from '../../messages/message.service';\nimport { User } from '../../models/user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angularfire2/auth\";\nimport * as i2 from \"angularfire2/database\";\nimport * as i3 from \"../../messages/message.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(afAuth, db, messageService) {\n      this.afAuth = afAuth;\n      this.db = db;\n      this.messageService = messageService;\n      this.user = this.afAuth.authState.pipe(switchMap(auth => {\n        if (auth) {\n          return this.db.object('users/' + auth.uid).valueChanges().pipe(map(user => {\n            return Object.assign(Object.assign({}, user), {\n              uid: auth.uid\n            });\n          }));\n        } else {\n          return of(null);\n        }\n      }));\n    }\n\n    googleLogin() {\n      const provider = new firebase.auth.GoogleAuthProvider();\n      return this.afAuth.auth.signInWithPopup(provider).then(credential => {\n        this.updateNewUser(credential.user);\n      }, error => {\n        throw error;\n      });\n    }\n\n    emailSignUp(email, password) {\n      return this.afAuth.auth.createUserWithEmailAndPassword(email, password).then(user => {\n        this.updateNewUser(user);\n      }, error => {\n        throw error;\n      });\n    }\n\n    emailLogin(email, password) {\n      return this.afAuth.auth.signInWithEmailAndPassword(email, password).then(user => {\n        this.updateNewUser(user);\n      }, error => {\n        throw error;\n      });\n    }\n\n    signOut() {\n      this.afAuth.auth.signOut();\n      this.messageService.add('You have been logged out.');\n    }\n\n    updateProfile(userData) {\n      this.updateExistingUser(userData);\n      this.messageService.add('User profile has been updated!');\n    }\n\n    updatePassword(password) {\n      return this.afAuth.auth.currentUser.updatePassword(password).then(() => {\n        this.messageService.add('Password has been updated!');\n      }).catch(function (error) {\n        throw error;\n      });\n    }\n\n    updateEmail(email) {\n      return this.afAuth.auth.currentUser.updateEmail(email).then(() => {\n        this.updateExistingUser({\n          email: email\n        });\n        this.messageService.add('User email have been updated!');\n      }).catch(function (error) {\n        throw error;\n      });\n    }\n\n    updateNewUser(authData) {\n      const userData = new User(authData);\n      const ref = this.db.object('users/' + authData.uid);\n      ref.valueChanges().pipe(take(1)).subscribe(user => {\n        if (!user) {\n          ref.update(userData);\n        }\n      });\n    }\n\n    updateExistingUser(userData) {\n      const currentUser = this.afAuth.auth.currentUser;\n      const ref = this.db.object('users/' + currentUser.uid);\n      ref.valueChanges().pipe(take(1)).subscribe(user => {\n        ref.update(userData);\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFireDatabase), i0.ɵɵinject(i3.MessageService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}