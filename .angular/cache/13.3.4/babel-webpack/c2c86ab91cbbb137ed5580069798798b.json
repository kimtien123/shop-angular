{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Order } from '../../models/order.model';\nimport { Customer } from '../../models/customer.model';\nimport * as i0 from \"@angular/core\";\nexport let CheckoutService = /*#__PURE__*/(() => {\n  class CheckoutService {\n    constructor() {\n      this.orderInProgressChanged = new EventEmitter();\n      this.stepChanged = new EventEmitter();\n      this.orderInProgress = new Order(new Customer());\n      this.activeStep = 0;\n    }\n\n    gotoStep(number) {\n      this.activeStep = number;\n      this.stepChanged.emit(this.activeStep);\n    }\n\n    nextStep() {\n      this.activeStep++;\n      this.stepChanged.emit(this.activeStep);\n    }\n\n    previousStep() {\n      this.activeStep--;\n      this.stepChanged.emit(this.activeStep);\n    }\n\n    resetSteps() {\n      this.activeStep = 0;\n    }\n\n    setCustomer(customer) {\n      this.orderInProgress.customer = customer;\n      this.orderInProgressChanged.emit(this.orderInProgress);\n    }\n\n    setShippingMethod(shippingMethod) {\n      this.orderInProgress.shippingMethod = shippingMethod;\n      this.orderInProgressChanged.emit(this.orderInProgress);\n    }\n\n    setOrderItems(items) {\n      this.orderInProgress.items = items;\n      this.orderInProgressChanged.emit(this.orderInProgress);\n    }\n\n    getOrderInProgress() {\n      return this.orderInProgress;\n    }\n\n    setPaymentMethod(paymentMethod) {\n      this.orderInProgress.paymentMethod = paymentMethod;\n      this.orderInProgressChanged.emit(this.orderInProgress);\n    }\n\n  }\n\n  CheckoutService.ɵfac = function CheckoutService_Factory(t) {\n    return new (t || CheckoutService)();\n  };\n\n  CheckoutService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CheckoutService,\n    factory: CheckoutService.ɵfac\n  });\n  return CheckoutService;\n})();","map":null,"metadata":{},"sourceType":"module"}