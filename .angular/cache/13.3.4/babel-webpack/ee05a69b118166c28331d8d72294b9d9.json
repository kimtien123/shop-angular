{"ast":null,"code":"import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport Siema from 'siema';\nimport { NgxSiemaService } from './siema.service';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './siema.service';\nvar _c0 = [\"*\"];\nvar _c1 = [[[\"ngx-siema-slide\"]]];\nvar _c2 = [\"ngx-siema-slide\"];\n\nvar NgxSiemaSlideComponent = function () {\n  function NgxSiemaSlideComponent() {}\n\n  NgxSiemaSlideComponent.ɵfac = function NgxSiemaSlideComponent_Factory(t) {\n    return new (t || NgxSiemaSlideComponent)();\n  };\n\n  NgxSiemaSlideComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgxSiemaSlideComponent,\n    selectors: [[\"ngx-siema-slide\"]],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function NgxSiemaSlideComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] {\\n        display: flex;\\n      }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return NgxSiemaSlideComponent;\n}();\n\nexport { NgxSiemaSlideComponent };\n\nNgxSiemaSlideComponent.ctorParameters = function () {\n  return [];\n};\n\nvar NgxSiemaComponent = function () {\n  function NgxSiemaComponent(ngxSiemaService) {\n    this.ngxSiemaService = ngxSiemaService;\n    this.next = new EventEmitter();\n    this.prev = new EventEmitter();\n    this.goTo = new EventEmitter();\n    this.remove = new EventEmitter();\n    this.insert = new EventEmitter();\n    this.prepend = new EventEmitter();\n    this.append = new EventEmitter();\n    this.destroy = new EventEmitter();\n    this.currentSlide = new EventEmitter();\n  }\n\n  NgxSiemaComponent.prototype.ngAfterViewInit = function () {\n    this.instance = new Siema(this.options);\n  };\n\n  NgxSiemaComponent.prototype.ngOnInit = function () {\n    var _this = this;\n\n    this.ngxClass = this.options.selector.replace('.', '');\n    this.nextSubscription = this.ngxSiemaService.onNext().subscribe(function (data) {\n      if (_this.compareSelectors(data.selector) && _this.instance) {\n        _this.instance.next(data.numbers, function () {\n          _this.next.emit({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n\n          data.listener.next({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n        });\n      }\n    });\n    this.prevSubscription = this.ngxSiemaService.onPrev().subscribe(function (data) {\n      if (_this.compareSelectors(data.selector) && _this.instance) {\n        _this.instance.prev(data.numbers, function () {\n          _this.prev.emit({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n\n          data.listener.next({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n        });\n      }\n    });\n    this.goToSubscription = this.ngxSiemaService.onGoTo().subscribe(function (data) {\n      if (_this.compareSelectors(data.selector) && _this.instance) {\n        _this.instance.goTo(data.index, function () {\n          _this.goTo.emit({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n\n          data.listener.next({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n        });\n      }\n    });\n    this.removeSubscription = this.ngxSiemaService.onRemove().subscribe(function (data) {\n      if (_this.compareSelectors(data.selector) && _this.instance) {\n        _this.instance.remove(data.index, function () {\n          _this.remove.emit({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n\n          data.listener.next({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n        });\n      }\n    });\n    this.insertSubscription = this.ngxSiemaService.onInsert().subscribe(function (data) {\n      if (_this.compareSelectors(data.selector) && _this.instance) {\n        _this.instance.insert(data.item, data.index, function () {\n          _this.insert.emit({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n\n          data.listener.next({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n        });\n      }\n    });\n    this.prependSubscription = this.ngxSiemaService.onPrepend().subscribe(function (data) {\n      if (_this.compareSelectors(data.selector) && _this.instance) {\n        _this.instance.prepend(data.item, function () {\n          _this.prepend.emit({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n\n          data.listener.next({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n        });\n      }\n    });\n    this.appendSubscription = this.ngxSiemaService.onAppend().subscribe(function (data) {\n      if (_this.compareSelectors(data.selector) && _this.instance) {\n        _this.instance.append(data.item, function () {\n          _this.append.emit({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n\n          data.listener.next({\n            selector: _this.options.selector,\n            currentSlide: _this.instance.currentSlide\n          });\n        });\n      }\n    });\n    this.destroySubscription = this.ngxSiemaService.onDestroy().subscribe(function (data) {\n      if (_this.compareSelectors(data.selector) && _this.instance) {\n        _this.instance.destroy(data.restoreMarkup, function () {\n          _this.destroy.emit({\n            selector: _this.options.selector\n          });\n\n          data.listener.next({\n            selector: _this.options.selector\n          });\n        });\n      }\n    });\n    this.currentSlideSubscription = this.ngxSiemaService.onCurrentSlide().subscribe(function (data) {\n      if (_this.compareSelectors(data.selector) && _this.instance) {\n        _this.currentSlide.emit({\n          selector: _this.options.selector,\n          currentSlide: _this.instance.currentSlide\n        });\n\n        data.listener.next({\n          selector: _this.options.selector,\n          currentSlide: _this.instance.currentSlide\n        });\n      }\n    });\n  };\n\n  NgxSiemaComponent.prototype.ngOnDestroy = function () {\n    var _this = this;\n\n    if (this.instance) {\n      setTimeout(function () {\n        _this.instance.destroy();\n\n        _this.instance = null;\n      });\n    }\n\n    this.nextSubscription.unsubscribe();\n    this.prevSubscription.unsubscribe();\n    this.goToSubscription.unsubscribe();\n    this.removeSubscription.unsubscribe();\n    this.insertSubscription.unsubscribe();\n    this.prependSubscription.unsubscribe();\n    this.appendSubscription.unsubscribe();\n    this.destroySubscription.unsubscribe();\n    this.currentSlideSubscription.unsubscribe();\n  };\n\n  NgxSiemaComponent.prototype.onNext = function (numbers) {\n    if (numbers === void 0) {\n      numbers = 1;\n    }\n\n    this.instance.next(numbers, this.next.emit({\n      currentSlide: this.instance.currentSlide\n    }));\n  };\n\n  NgxSiemaComponent.prototype.onPrev = function (numbers) {\n    if (numbers === void 0) {\n      numbers = 1;\n    }\n\n    this.instance.prev(numbers, this.next.emit({\n      currentSlide: this.instance.currentSlide\n    }));\n  };\n\n  NgxSiemaComponent.prototype.onGoTo = function (index) {\n    this.instance.goTo(index, this.goTo.emit({\n      currentSlide: this.instance.currentSlide\n    }));\n  };\n\n  NgxSiemaComponent.prototype.onRemove = function (index) {\n    this.instance.remove(index, this.remove.emit({\n      currentSlide: this.instance.currentSlide\n    }));\n  };\n\n  NgxSiemaComponent.prototype.onInsert = function (item, index) {\n    this.instance.insert(item, index, this.insert.emit({\n      currentSlide: this.instance.currentSlide\n    }));\n  };\n\n  NgxSiemaComponent.prototype.onPrepend = function (item) {\n    this.instance.prepend(item, this.prepend.emit({\n      currentSlide: this.instance.currentSlide\n    }));\n  };\n\n  NgxSiemaComponent.prototype.onAppend = function (item) {\n    this.instance.append(item, this.append.emit({\n      currentSlide: this.instance.currentSlide\n    }));\n  };\n\n  NgxSiemaComponent.prototype.onDestroy = function (restoreMarkup) {\n    if (restoreMarkup === void 0) {\n      restoreMarkup = false;\n    }\n\n    this.instance.destroy(restoreMarkup, this.destroy.emit({\n      currentSlide: this.instance.currentSlide\n    }));\n  };\n\n  NgxSiemaComponent.prototype.onCurrentSlide = function () {\n    this.currentSlide.emit({\n      currentSlide: this.instance.currentSlide\n    });\n  };\n\n  NgxSiemaComponent.prototype.compareSelectors = function (selector) {\n    return !selector || selector === this.options.selector;\n  };\n\n  NgxSiemaComponent.ɵfac = function NgxSiemaComponent_Factory(t) {\n    return new (t || NgxSiemaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgxSiemaService));\n  };\n\n  NgxSiemaComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgxSiemaComponent,\n    selectors: [[\"ngx-siema\"]],\n    inputs: {\n      options: \"options\"\n    },\n    outputs: {\n      next: \"next\",\n      prev: \"prev\",\n      goTo: \"goTo\",\n      remove: \"remove\",\n      insert: \"insert\",\n      prepend: \"prepend\",\n      append: \"append\",\n      destroy: \"destroy\",\n      currentSlide: \"currentSlide\"\n    },\n    ngContentSelectors: _c2,\n    decls: 2,\n    vars: 3,\n    template: function NgxSiemaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.ngxClass);\n      }\n    },\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return NgxSiemaComponent;\n}();\n\nexport { NgxSiemaComponent };\n\nNgxSiemaComponent.ctorParameters = function () {\n  return [{\n    type: NgxSiemaService\n  }];\n};\n\nNgxSiemaComponent.propDecorators = {\n  'options': [{\n    type: Input\n  }],\n  'next': [{\n    type: Output\n  }],\n  'prev': [{\n    type: Output\n  }],\n  'goTo': [{\n    type: Output\n  }],\n  'remove': [{\n    type: Output\n  }],\n  'insert': [{\n    type: Output\n  }],\n  'prepend': [{\n    type: Output\n  }],\n  'append': [{\n    type: Output\n  }],\n  'destroy': [{\n    type: Output\n  }],\n  'currentSlide': [{\n    type: Output\n  }]\n}; //# sourceMappingURL=siema.component.js.map","map":null,"metadata":{},"sourceType":"module"}