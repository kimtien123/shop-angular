{"ast":null,"code":"import { of, from as fromPromise } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { AngularFireDatabase } from 'angularfire2/database';\nimport { MessageService } from '../../../messages/message.service';\nimport { AuthService } from '../../shared/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../messages/message.service\";\nimport * as i2 from \"../../shared/auth.service\";\nimport * as i3 from \"angularfire2/database\";\nexport let OrderService = /*#__PURE__*/(() => {\n  class OrderService {\n    constructor(messageService, authService, store) {\n      this.messageService = messageService;\n      this.authService = authService;\n      this.store = store;\n    }\n\n    getOrders() {\n      return this.authService.user.pipe(switchMap(user => {\n        if (user) {\n          const remoteUserOrders = `/users/${user.uid}/orders`;\n          return this.store.list(remoteUserOrders).valueChanges();\n        } else {\n          return of(null);\n        }\n      }));\n    }\n\n    addUserOrder(order, total, user) {\n      const orderWithMetaData = Object.assign(Object.assign(Object.assign({}, order), this.constructOrderMetaData(order)), {\n        total\n      });\n      const databaseOperation = this.store.list(`users/${user}/orders`).push(orderWithMetaData).then(response => response, error => error);\n      return fromPromise(databaseOperation);\n    }\n\n    addAnonymousOrder(order, total) {\n      const orderWithMetaData = Object.assign(Object.assign(Object.assign({}, order), this.constructOrderMetaData(order)), {\n        total\n      });\n      const databaseOperation = this.store.list('orders').push(orderWithMetaData).then(response => response, error => error);\n      return fromPromise(databaseOperation);\n    }\n\n    constructOrderMetaData(order) {\n      return {\n        number: (Math.random() * 10000000000).toString().split('.')[0],\n        date: new Date().toString(),\n        status: 'In Progress'\n      };\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.messageService.addError(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n\n  }\n\n  OrderService.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.AngularFireDatabase));\n  };\n\n  OrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac\n  });\n  return OrderService;\n})();","map":null,"metadata":{},"sourceType":"module"}