{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport 'rxjs/add/operator/publish';\nimport * as ɵngcc0 from '@angular/core';\nvar next$ = new ReplaySubject(1);\nvar prev$ = new ReplaySubject(1);\nvar goTo$ = new ReplaySubject(1);\nvar remove$ = new ReplaySubject(1);\nvar insert$ = new ReplaySubject(1);\nvar prepend$ = new ReplaySubject(1);\nvar append$ = new ReplaySubject(1);\nvar destroy$ = new ReplaySubject(1);\nvar currentSlide$ = new ReplaySubject(1);\n\nvar NgxSiemaService = function () {\n  function NgxSiemaService() {}\n\n  NgxSiemaService.prototype.next = function (numbers, selector) {\n    if (numbers === void 0) {\n      numbers = 1;\n    }\n\n    var listener = new BehaviorSubject(null);\n    next$.next({\n      selector: selector,\n      numbers: numbers,\n      listener: listener\n    });\n    return listener.asObservable();\n  };\n\n  NgxSiemaService.prototype.prev = function (numbers, selector) {\n    if (numbers === void 0) {\n      numbers = 1;\n    }\n\n    var listener = new BehaviorSubject(null);\n    prev$.next({\n      selector: selector,\n      numbers: numbers,\n      listener: listener\n    });\n    return listener.asObservable();\n  };\n\n  NgxSiemaService.prototype.goTo = function (index, selector) {\n    var listener = new BehaviorSubject(null);\n    goTo$.next({\n      selector: selector,\n      index: index,\n      listener: listener\n    });\n    return listener.asObservable();\n  };\n\n  NgxSiemaService.prototype.remove = function (index, selector) {\n    var listener = new BehaviorSubject(null);\n    remove$.next({\n      selector: selector,\n      index: index,\n      listener: listener\n    });\n    return listener.asObservable();\n  };\n\n  NgxSiemaService.prototype.insert = function (item, index, selector) {\n    var listener = new BehaviorSubject(null);\n    insert$.next({\n      selector: selector,\n      item: item,\n      index: index,\n      listener: listener\n    });\n    return listener.asObservable();\n  };\n\n  NgxSiemaService.prototype.prepend = function (item, selector) {\n    var listener = new BehaviorSubject(null);\n    prepend$.next({\n      selector: selector,\n      item: item,\n      listener: listener\n    });\n    return listener.asObservable();\n  };\n\n  NgxSiemaService.prototype.append = function (item, selector) {\n    var listener = new BehaviorSubject(null);\n    append$.next({\n      selector: selector,\n      item: item,\n      listener: listener\n    });\n    return listener.asObservable();\n  };\n\n  NgxSiemaService.prototype.destroy = function (restoreMarkup, selector) {\n    if (restoreMarkup === void 0) {\n      restoreMarkup = false;\n    }\n\n    var listener = new BehaviorSubject(null);\n    destroy$.next({\n      selector: selector,\n      listener: listener\n    });\n    return listener.asObservable();\n  };\n\n  NgxSiemaService.prototype.currentSlide = function (selector) {\n    var listener = new BehaviorSubject(null);\n    currentSlide$.next({\n      selector: selector,\n      listener: listener\n    });\n    return listener.asObservable();\n  };\n\n  NgxSiemaService.prototype.onNext = function () {\n    return next$.publish().refCount();\n  };\n\n  NgxSiemaService.prototype.onPrev = function () {\n    return prev$.publish().refCount();\n  };\n\n  NgxSiemaService.prototype.onGoTo = function () {\n    return goTo$.publish().refCount();\n  };\n\n  NgxSiemaService.prototype.onRemove = function () {\n    return remove$.publish().refCount();\n  };\n\n  NgxSiemaService.prototype.onInsert = function () {\n    return insert$.publish().refCount();\n  };\n\n  NgxSiemaService.prototype.onPrepend = function () {\n    return prepend$.publish().refCount();\n  };\n\n  NgxSiemaService.prototype.onAppend = function () {\n    return append$.publish().refCount();\n  };\n\n  NgxSiemaService.prototype.onDestroy = function () {\n    return destroy$.publish().refCount();\n  };\n\n  NgxSiemaService.prototype.onCurrentSlide = function () {\n    return currentSlide$.publish().refCount();\n  };\n\n  NgxSiemaService.ɵfac = function NgxSiemaService_Factory(t) {\n    return new (t || NgxSiemaService)();\n  };\n\n  NgxSiemaService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NgxSiemaService,\n    factory: function (t) {\n      return NgxSiemaService.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return NgxSiemaService;\n}();\n\nexport { NgxSiemaService };\n\nNgxSiemaService.ctorParameters = function () {\n  return [];\n}; //# sourceMappingURL=siema.service.js.map","map":null,"metadata":{},"sourceType":"module"}